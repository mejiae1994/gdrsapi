name: Create and publish a Docker image

on:
  workflow_dispatch:
  push:
    branches: ["master"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    needs: build-and-push-image
    runs-on: self-hosted

    steps:
      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull latest image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:master

      - name: Create google credentials .env
        run: |
          cd /home/konedi/pg-docker
          echo "GOOGLE_SA_CRED='${{ secrets.GOOGLE_SA_CRED }}'" > .env
          echo "CLOUDFLARE_API_KEY"='${{ secrets.CLOUDFLARE_API_KEY }}' >> .env
          echo "CLOUDFLARE_ACCOUNT_ID"='${{ secrets.CLOUDFLARE_ACCOUNT_ID }}' >> .env
          echo "GEMINI_API_KEY"='${{ secrets.GEMINI_API_KEY }}' >> .env

      - name: Restart Docker Compose
        run: |
          cd /home/konedi/pg-docker
          if ! docker compose up -d; then
            echo "Failed to start containers"
            exit 1
          fi

          echo "Waiting for containers to start"
          # Verify deployment
          sleep 10  # Give containers time to start
          if ! docker compose ps | grep -q "Up"; then
            echo "Containers failed to start properly"
            docker compose logs
            exit 1
          fi
          echo "Containers started successfully"

          docker image prune -f  # Optional: Clean up old images
          echo "Pruned images"
